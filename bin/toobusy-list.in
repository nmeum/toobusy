#!@GUILE@ \
--no-auto-compile -s
!#

(use-modules (toobusy search)
             (toobusy event)
             (toobusy util)

             (srfi srfi-37))

(define start #f)
(define end   "+7")

(define start-opt
  (option
    '(#\s "start") #t #f
    (lambda (o n x vals)
      (set! start x)
      vals)))

(define end-opt
  (option
    '(#\e "end") #t #f
    (lambda (o n x vals)
      (set! end x)
      vals)))

(define (parse-args args flags)
  (reverse
    (args-fold
      args
      flags
      (lambda (o n x vals)
        (error "unrecognized option" n))
     cons
      '())))

(define (string->tm str)
  ;; TODO: Make this configurable
  (define TIME-FMT "%Y-%m-%d")

  (car (strptime TIME-FMT str)))

(define (get-start-time)
  (if start
    (string->tm start)
    (localtime (current-time))))

(define (get-end-time start-tm)
  (if (eq? #\+ (string-ref end 0))
    (add-days start-tm (string->number end))
    ;; TODO: ensure that end time is after start time.
    (string->tm end)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (list-events events)
  (let ((grp (group-events events)))
    (for-each
      (lambda (events-of-day)
        (let ((fst-tm (event-start (car events-of-day))))
          (format #t "## ~a~%" (strftime "%Y-%d-%d" fst-tm))
          (for-each event-print events-of-day)))
      grp)))

(define (main . args)
  (let* ((flags (list start-opt end-opt))
         (rest  (parse-args args flags)))
    (unless (null? rest)
      (error "too many arguments"))
    (let* ((start  (get-start-time))
           (query  (range-query start (get-end-time start)))
           (events (search query)))
      (list-events events))))

(apply main (cdr (command-line)))

;; vim: ft=scheme
