#!@GUILE@ \
--no-auto-compile -s
!#

(use-modules (toobusy search)
             (toobusy config)
             (toobusy event)
             (toobusy util)
             (toobusy time)
             (toobusy color)

             (srfi srfi-1)
             (srfi srfi-37))

(define start-opt
  (option
    '(#\s "start") #t #f
    (lambda (o n x vals)
      (alist-cons 'start-time x vals))))

(define end-opt
  (option
    '(#\e "end") #t #f
    (lambda (o n x vals)
      (alist-cons 'end-time x vals))))

(define (parse-args args flags)
  (reverse
    (args-fold
      args
      flags
      (lambda (o n x vals)
        (error "unrecognized option" n))
      cons
      '())))

(define (get-start-time opt)
  (if opt
    (string->tm opt)
    (localtime (current-time))))

(define (get-end-time opt start-tm)
  (let ((opt (or opt (config-list-delta %config))))
    (or (reltime->tm start-tm opt)
        (string->tm opt))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (main . args)
  (let* ((flags (list start-opt end-opt))
         (opts  (parse-args args flags)))
    (let* ((start  (get-start-time (assq-ref opts 'start-time)))
           (end    (get-end-time (assq-ref opts 'end-time) start)))
      (display-events (search (range-query start end))))))

(load-config!)
(apply main (cdr (command-line)))

;; vim: ft=scheme
